i'm going to give you a listing of the code for the addframe/addframe2 functions in the NHL92 for Sega Genesis Source code, along with the description for the addframe/addframe2 functions reverse engineered from the binary for NHL94 for sega genesis, and then the hex code listing of addframe/addframe2 for NHL95 for sega genesis.

These functions read frame/sprite data and are able to display player animation frames as a result.

I'm trying to understand the NHL95 file format and the changes they made since 94, it seems like they moved around where the tile index and potentially other values are. Can you write out a labelled/commented source of the NHL95 version and then explain the file format for sprite data in NHL95? And then I want you to write a node port of addfame2 such that I can run the script and pass in the rom file and frame number, and it will console log all the key data its reading from the rom and the offsets its reading it from. Make sure to also call out relative address reads vs absolute address reads-- do I need to base in a base address so that the relative address reads are correct?

Finally-- here is a sample of the data structure in the NHL95 rom:
OK, so frame table address starts at 0x1318F4. values for frame 1,2,3 are 0x842, 0x84A, 0x862

Sprite data for frame 1 should be at 0x1318F4+0x842 = 0x132136: `00 00 00 00 40 03 00 00`

frame 2 (3 sprites):
```FF E7 0B 00 41 B0 FF F4 
FF F7 60 00 41 24 00 0C 
FF EF 60 00 41 25 00 0C ```

Can you read it and explain to me based on everything you know, what the data in these two frames is? then i can test the script to see if it matches this.

NHL 92:
addframe
;a3 = cords.l frame/oldframe VRsize VRchar
;a5 = dma trans
;a6/d6 = sprite att
	movem.l	d0-d2,-(a7)
	move	Xpos(a3),d0
	move	Ypos(a3),d1
	move	Zpos(a3),d2
	bmi	.exit
	bsr	find3d
	cmp	#osflag,d1
	beq	.exit
	bsr	addframe2
.exit
	movem.l	(a7)+,d0-d2
	rts

addframe2
;d0/d1 = x/y coordinates on screen
	;a5 = dma list
	;a6 = sprite table
	;d6 = link counter

	movem.l	d0-d5/a0-a2,-(a7)
	move	frame(a3),d5
	bmi	.exit
	beq	.exit
	asl	#2,d5
	move	#framelist,a2
	move.l	-4(a2,d5),a2
	move	SprStrnum(a2),d5	;number of sprites in frame
	add	#SprStrdat,a2
	clr	d3
	clr	d4
.sloop
	move	d0,-(a7)
	move	frame(a3),d0
	cmp	oldframe(a3),d0
	beq	.noref

	tst	d5
	bne	.nn
	move	d0,oldframe(a3)
.nn
	movem	d0-d4,-(a7)
	move	4(a2),d2
	and	#$7ff,d2
	move	2(a2),d4
	and	#$f000,d4
	lsr	#1,d4
	or	d4,d2	;full 15 bits of data pointer

	move.b	2(a2),d4
	and	#$f,d4
	move.l	#sizetab,a0
	move.b	0(a0,d4),d4	;chars used in this sprite
	cmp	8(a7),d4
	bgt	.nodup	;more data in prev sprite so no dup
	cmp	4(a7),d2
	blt	.nodup
	move	4(a7),d0
	add	8(a7),d0	;end of last data
	sub	d2,d0
	sub	d4,d0	
	bmi	.nodup
	movem	(a7)+,d0-d1
	add	#6,a7
	bra	.dup

.nodup	add	8(a7),d3
	movem	(a7)+,d0-d1
	add	#6,a7

	movem	d0-d4,-(a7)
	add	VRchar(a3),d3
	move.l	Spritetiles,a0
	ext.l	d2
	asl.l	#5,d2
	add.l	d2,a0
	asl	#4,d4
	asl	#5,d3
	move.l	a0,(a5)+
	move	d4,(a5)+	;words to transfer
	move	d3,(a5)+	;vram destination
	movem	(a7)+,d0-d4
.dup
	move.b	d3,VRoffs(a3,d5)
.noref
	move	(a7)+,d0
	movem	d0-d2,-(a7)	;write sprite att
	move	(a2),d2	;y global
	btst	#4,attribute(a3)	;y flip
	beq	.noyflip
	move.b	2(a2),d2
	and	#%0011,d2
	add	#1,d2
	asl	#3,d2
	neg	d2
	sub	(a2),d2
.noyflip	add	d2,d1
	move	d1,(a6)

	move	6(a2),d2	;x global
	btst	#3,attribute(a3)	;x flip
	beq	.noxflip
	move.b	2(a2),d2
	and	#%1100,d2
	add	#%0100,d2
	asl	#1,d2
	neg	d2
	sub	6(a2),d2
.noxflip	add	d2,d0
	move	d0,6(a6)
	move.b	2(a2),2(a6)
	move.b	d6,3(a6)
	move	4(a2),d2
	move	attribute(a3),d0
	eor	d0,d2
	and	#$f800,d2
	btst	#0,attribute+1(a3)
	beq	.nospec
	btst	#14,d2
	beq	.nospec
	bset	#13,d2	;team 2 color
.nospec	or.b	VRoffs(a3,d5),d2
	add	VRchar(a3),d2
	move	d2,4(a6)
	movem	(a7)+,d0-d2

	add	#1,d6
	add	#8,a6
	add	#8,a2
	dbf	d5,.sloop
.exit
	movem.l	(a7)+,d0-d5/a0-a2
	rts

sizetab
	dc.b	1,2,3,4,2,4,6,8,3,6,9,12,4,8,12,16


NHL94 addframe2 (NHL93 is the same code, just different addresses):

Move frame into d4, pass top 5 bits.
EOR d4 with attribute (used for palette later)
Frame back into d4, pass first 11 bits
Move address $5DE7A into a2
Add long word at offset 4 to a2 address ($408AA) - $5DE7A+$408AA = $9E724
Add d4 (frame) to itself
Compare data at 2+a2 ($9E726 - $69E) to d4. Might be max length 
Exit if d4 greater than
Move data at 2+a2+d4 into d5
Sub data at a2+d4 from d5.
Divide d5 by 8, and subtract 1. d5 now has # of sprites in frame (SprStrNum)?
Add data at a2+d4 to a2 (moves to the SprStrdat)

Then it checks if frame is the same as old frame, and will update old frame if on the last sprite in the frame.

a2 now at the Sprite tile data bytes (SprStrdat)
Move bytes 4-5 into d2 (tile pointer)
Move byte 7 into d4 (sizetab byte)
Use d4 as index to sizetab table, and put # tiles into d4

Then it compares to previous d4 and branches if larger. If not, it will do a check if the tile is smaller, than branch. 
If it's the same, and the data is pointing at the same tiles, it will branch to the dup code.

Take d2, mult by 32 decimal. 
Add the Spritetiles address ($5DE84) to d2. d2 now holds the address of the first sprite tile.

--
NHL 95: $79D80 matches with NHL92 $CA4A (start of addframe)

sizetab at $CBCC in 92, = 0102 0304 0204 0608 0306, at $79F50 in 95

Hex code for NHL95 addframe and addframe2:

48E7E0003013322B0014342B00186B0000126100285AB27C4E2067000006610000084CDF00074E75

3F2B000448E7FCE0382B00066B000194670001900244F800B96B0004382B0006024407FF247C000CA56AD5EA0004E344B8526C00016E3A3240029A724000E64D5345D4F24000424342443F00302B0006024007FFB06B0008670000AA4A45660000063740000848A7F800342A00020242F000E24A3F02342A0004024207FF845F4244182A00020244000FB87C000F6EFA207C00079F5418304000B86F00086E000024B46F00046D00001C302F0004D06F0008904290446B00000C4C9F00035C4F6000003ED66F00084C9F00035C4F48A7F800D66B001248C2EB8248E78020247C000CA56A200A06800000000AD4804CDF0401E944EB432AC23AC43AC34C9F001F1783500A301F48A7E0003412082B0004000467000012142A0002024200035242E74244429452D2423C81342A0006082B0003000467000014142A00020242000C5842E3424442946A0006D0423D4000061D6A000200021D460003142A0004024200F8E14A142A0002302B0004B1420242F800082B000000056700000E0802000E6700000608C2000D8433500AD46B00123D4200044C9F00075246504E504A51CDFEAA4CDF073F375F00044E75

01020304020406080306090C04080C10