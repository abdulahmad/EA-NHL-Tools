// Analysis script to understand 0x5E command behavior

// Expected output before 0x5E command (at position where 0x5E starts):
const outputBeforeCommand = [
    0x66, 0x66, 0x66, 0x66, 0x65, 0x55, 0x55, 0x55, 0x65, 0x44, 0x44, 0x44, 0x65, 0x47, 0x77, 0x77,
    0x65, 0x47, 0x77, 0x77, 0x65, 0x47, 0x77, 0x77, 0x65, 0x47, 0x77, 0x77, 0x65, 0x47, 0x77, 0x77,
    0x66, 0x66, 0x66, 0x66, 0x55, 0x55, 0x55, 0x55, 0x44, 0x44, 0x44, 0x44, 0x77, 0x77, 0x77, 0x77,
    0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77,
    0x66, 0x66, 0x66, 0x66, 0x55, 0x55, 0x55, 0x55, 0x44, 0x44, 0x44, 0x44, 0x77, 0x77, 0x77, 0x77,
    0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x18, 0x77, 0x77, 0x18, 0x88, 0x77, 0x18, 0x88, 0x92,
    0x66, 0x66, 0x66, 0x66, 0x55, 0x55, 0x55, 0x55, 0x44, 0x44, 0x44, 0x44, 0x77, 0x11, 0x11, 0x11,
    0x11, 0x22, 0x28, 0x82, 0x22, 0x33, 0x32, 0x22, 0x34, 0x44, 0x32, 0x98, 0x22, 0x99, 0x98, 0x88,
    0x66, 0x66, 0x66, 0x66, 0x55, 0x55, 0x55, 0x55, 0x44, 0x44, 0x44, 0x44, 0x11, 0x77, 0x77, 0x77,
    0x99, 0x88, 0x11, 0x77, 0x98, 0x11, 0x18, 0x77, 0x81, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
    0x66, 0x66, 0x66, 0x66, 0x55, 0x55, 0x55, 0x55, 0x44, 0x44, 0x44, 0x44, 0x77, 0x77, 0x77, 0x77,
    0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x82, 0x87, 0x77, 0x77,
    0x66, 0x66, 0x66, 0x61, 0x55, 0x55, 0x55, 0x21, 0x44, 0x44, 0x43, 0x21, 0x77, 0x77, 0x73, 0x21,
    0x77, 0x77, 0x73, 0x21, 0x77, 0x77, 0x73, 0x21, 0x77, 0x77, 0x73, 0x21, 0x77, 0x77, 0x73, 0x21,
    0x65, 0x47, 0x77, 0x77, 0x65, 0x47, 0x77, 0x77, 0x65, 0x47, 0x77, 0x77, 0x65, 0x47, 0x77, 0x77,
    0x65, 0x47, 0x77, 0x77, 0x65, 0x47, 0x77, 0x77, 0x65, 0x47, 0x77, 0x77, 0x65, 0x47, 0x77, 0x77,
    0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x71 // This is where 0x5E starts
];

// What 0x5E should output (16 bytes):
const expectedOutput = [0x77, 0x77, 0x77, 0x18, 0x77, 0x77, 0x77, 0x18, 0x77, 0x77, 0x77, 0x18, 0x77, 0x77];

console.log("Output length before 0x5E:", outputBeforeCommand.length);
console.log("Expected 0x5E output:", expectedOutput.map(b => b.toString(16).padStart(2, '0')).join(' '));

// Let's look for the pattern "77 77 77 18" in the output
const pattern = [0x77, 0x77, 0x77, 0x18];
let found = false;

for (let i = 0; i <= outputBeforeCommand.length - pattern.length; i++) {
    let match = true;
    for (let j = 0; j < pattern.length; j++) {
        if (outputBeforeCommand[i + j] !== pattern[j]) {
            match = false;
            break;
        }
    }
    if (match) {
        console.log(`Pattern "77 77 77 18" found at offset ${i} (from end: ${outputBeforeCommand.length - i})`);
        found = true;
    }
}

if (!found) {
    console.log("Pattern not found, looking for similar patterns...");
    // Look for 77 77 18
    const pattern2 = [0x77, 0x77, 0x18];
    for (let i = 0; i <= outputBeforeCommand.length - pattern2.length; i++) {
        let match = true;
        for (let j = 0; j < pattern2.length; j++) {
            if (outputBeforeCommand[i + j] !== pattern2[j]) {
                match = false;
                break;
            }
        }
        if (match) {
            console.log(`Pattern "77 77 18" found at offset ${i} (from end: ${outputBeforeCommand.length - i})`);
        }
    }
}

// Analysis of what different offset strategies would produce
console.log("\nAnalyzing different copy strategies for 0x5E (16 bytes):");

// Strategy 1: Copy from offset -16 (current implementation)
console.log("\nStrategy 1 - Copy from offset -16:");
const offset16 = outputBeforeCommand.slice(-16);
console.log("Would copy:", offset16.map(b => b.toString(16).padStart(2, '0')).join(' '));

// Strategy 2: Copy from offset -83 (where "77 77 18" pattern is)
console.log("\nStrategy 2 - Copy from offset -83:");
const offset83 = outputBeforeCommand.slice(-83, -83 + 16);
console.log("Would copy:", offset83.map(b => b.toString(16).padStart(2, '0')).join(' '));

// Strategy 3: Look for the pattern and copy from there
console.log("\nLooking at bytes around position 83:");
for (let i = 80; i < 90 && i < outputBeforeCommand.length; i++) {
    console.log(`Offset ${i}: ${outputBeforeCommand[outputBeforeCommand.length - i].toString(16).padStart(2, '0')}`);
}
