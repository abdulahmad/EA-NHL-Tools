const { NHL94Decompressor } = require('./nhl94-decompressor');

// Test the specific case that was failing
const testData = [
    0x31, 0x66, 0x00, 0x65, 0x30, 0x55, 0x00, 0x65, 0x30, 0x44, 0x03, 0x65, 0x47, 0x77, 0x77, 0x8D, 
    0x04, 0x31, 0x66, 0x31, 0x55, 0x31, 0x44, 0x3F, 0x77, 0x9B, 0x1F, 0x00, 0x18, 0x51, 0x00, 0x88, 
    0x51, 0x00, 0x92, 0x8A, 0x20
];

const decompressor = new NHL94Decompressor();
console.log('Testing fixed 8A 20 command...');

// Decompress
const result = decompressor.decompress(testData, 0, false);

console.log('Output length:', result.length);
console.log('Expected output (should end with 77):');

// Convert to hex string for easy comparison
const hexOutput = Array.from(result).map(b => b.toString(16).padStart(2, '0')).join(' ');
console.log('Full output:');
console.log(hexOutput);

// Check if it ends with 77
const lastByte = result[result.length - 1];
console.log(`\nLast byte: 0x${lastByte.toString(16)} (should be 0x77)`);

if (lastByte === 0x77) {
    console.log('✅ SUCCESS: Last byte is 0x77 as expected!');
} else {
    console.log('❌ FAILED: Last byte is not 0x77');
}

// Expected pattern based on user's description
const expected = [
    0x66, 0x66, 0x66, 0x66, 0x65, 0x55, 0x55, 0x55, 0x65, 0x44, 0x44, 0x44, 0x65, 0x47, 0x77, 0x77, 
    0x65, 0x47, 0x77, 0x77, 0x65, 0x47, 0x77, 0x77, 0x65, 0x47, 0x77, 0x77, 0x65, 0x47, 0x77, 0x77,
    0x66, 0x66, 0x66, 0x66, 0x55, 0x55, 0x55, 0x55, 0x44, 0x44, 0x44, 0x44, 0x77, 0x77, 0x77, 0x77, 
    0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77,
    0x66, 0x66, 0x66, 0x66, 0x55, 0x55, 0x55, 0x55, 0x44, 0x44, 0x44, 0x44, 0x77, 0x77, 0x77, 0x77, 
    0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x18, 0x77, 0x77, 0x18, 0x88, 0x77, 0x18, 0x88, 0x92,
    0x66, 0x66, 0x66, 0x66, 0x55, 0x55, 0x55, 0x55, 0x44, 0x44, 0x44, 0x44, 0x77
];

console.log('\nExpected output length:', expected.length);

if (result.length === expected.length) {
    console.log('✅ Output length matches expected!');
    
    // Check if output matches expected
    let matches = true;
    for (let i = 0; i < expected.length; i++) {
        if (result[i] !== expected[i]) {
            console.log(`❌ Mismatch at position ${i}: got 0x${result[i].toString(16)}, expected 0x${expected[i].toString(16)}`);
            matches = false;
            break;
        }
    }
    
    if (matches) {
        console.log('✅ SUCCESS: Output matches expected pattern exactly!');
    }
} else {
    console.log(`❌ Output length mismatch: got ${result.length}, expected ${expected.length}`);
}
