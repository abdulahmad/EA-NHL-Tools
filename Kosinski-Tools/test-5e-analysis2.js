// Better analysis script for 0x5E command

// The actual output at the point where 0x5E command executes
const outputBeforeCommand = [
    0x66, 0x66, 0x66, 0x66, 0x65, 0x55, 0x55, 0x55, 0x65, 0x44, 0x44, 0x44, 0x65, 0x47, 0x77, 0x77,
    0x65, 0x47, 0x77, 0x77, 0x65, 0x47, 0x77, 0x77, 0x65, 0x47, 0x77, 0x77, 0x65, 0x47, 0x77, 0x77,
    0x66, 0x66, 0x66, 0x66, 0x55, 0x55, 0x55, 0x55, 0x44, 0x44, 0x44, 0x44, 0x77, 0x77, 0x77, 0x77,
    0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77,
    0x66, 0x66, 0x66, 0x66, 0x55, 0x55, 0x55, 0x55, 0x44, 0x44, 0x44, 0x44, 0x77, 0x77, 0x77, 0x77,
    0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x18, 0x77, 0x77, 0x18, 0x88, 0x77, 0x18, 0x88, 0x92,
    0x66, 0x66, 0x66, 0x66, 0x55, 0x55, 0x55, 0x55, 0x44, 0x44, 0x44, 0x44, 0x77, 0x11, 0x11, 0x11,
    0x11, 0x22, 0x28, 0x82, 0x22, 0x33, 0x32, 0x22, 0x34, 0x44, 0x32, 0x98, 0x22, 0x99, 0x98, 0x88,
    0x66, 0x66, 0x66, 0x66, 0x55, 0x55, 0x55, 0x55, 0x44, 0x44, 0x44, 0x44, 0x11, 0x77, 0x77, 0x77,
    0x99, 0x88, 0x11, 0x77, 0x98, 0x11, 0x18, 0x77, 0x81, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
    0x66, 0x66, 0x66, 0x66, 0x55, 0x55, 0x55, 0x55, 0x44, 0x44, 0x44, 0x44, 0x77, 0x77, 0x77, 0x77,
    0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x82, 0x87, 0x77, 0x77,
    0x66, 0x66, 0x66, 0x61, 0x55, 0x55, 0x55, 0x21, 0x44, 0x44, 0x43, 0x21, 0x77, 0x77, 0x73, 0x21,
    0x77, 0x77, 0x73, 0x21, 0x77, 0x73, 0x21, 0x77, 0x77, 0x73, 0x21, 0x77, 0x77, 0x73, 0x21,
    0x65, 0x47, 0x77, 0x77, 0x65, 0x47, 0x77, 0x77, 0x65, 0x47, 0x77, 0x77, 0x65, 0x47, 0x77, 0x77,
    0x65, 0x47, 0x77, 0x77, 0x65, 0x47, 0x77, 0x77, 0x65, 0x47, 0x77, 0x77, 0x65, 0x47, 0x77, 0x77,
    0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x71
];

// What 0x5E should produce (the missing pattern):
const expectedAfter5E = [0x77, 0x77, 0x77, 0x18, 0x77, 0x77, 0x77, 0x18, 0x77, 0x77, 0x77, 0x18, 0x77, 0x77];

console.log("Looking for the source of the expected pattern...");
console.log("Expected pattern for 0x5E:", expectedAfter5E.map(b => '0x' + b.toString(16).padStart(2, '0')).join(', '));

// The pattern we're looking for is: 77 77 77 18 (repeated)
// Let's find where "77 77 77 18" appears in the output

console.log("\nSearching for '77 77 77 18' pattern in output:");
for (let i = 0; i <= outputBeforeCommand.length - 4; i++) {
    if (outputBeforeCommand[i] === 0x77 && 
        outputBeforeCommand[i+1] === 0x77 && 
        outputBeforeCommand[i+2] === 0x77 && 
        outputBeforeCommand[i+3] === 0x18) {
        console.log(`Found "77 77 77 18" at position ${i} (offset from end: -${outputBeforeCommand.length - i})`);
        
        // Show what copying 16 bytes from this position would give us
        const copied = [];
        for (let j = 0; j < 16 && i + j < outputBeforeCommand.length; j++) {
            copied.push(outputBeforeCommand[i + j]);
        }
        console.log(`Copying 16 bytes from position ${i}:`, copied.map(b => '0x' + b.toString(16).padStart(2, '0')).join(', '));
    }
}

// Let's also check what pattern repeats "77 77 77 18" multiple times
console.log("\nLet's see what a repeating pattern would look like:");
const pattern = [0x77, 0x77, 0x77, 0x18];
const repeated = [];
for (let i = 0; i < 16; i++) {
    repeated.push(pattern[i % 4]);
}
console.log("Pattern [77,77,77,18] repeated:", repeated.map(b => '0x' + b.toString(16).padStart(2, '0')).join(', '));

// This looks exactly like what we expect! So 0x5E needs to find the "77 77 77 18" pattern and repeat it.
// Let's find the first occurrence:
let patternStart = -1;
for (let i = 0; i <= outputBeforeCommand.length - 4; i++) {
    if (outputBeforeCommand[i] === 0x77 && 
        outputBeforeCommand[i+1] === 0x77 && 
        outputBeforeCommand[i+2] === 0x77 && 
        outputBeforeCommand[i+3] === 0x18) {
        patternStart = i;
        break;
    }
}

if (patternStart >= 0) {
    const offsetFromEnd = outputBeforeCommand.length - patternStart;
    console.log(`\nFirst occurrence at position ${patternStart}, offset from end: -${offsetFromEnd}`);
    console.log(`For 0x5E (lowNibble=14), this suggests the offset calculation should be related to the low nibble.`);
    
    // Let's see if there's a relationship: 14 and 184 (offset from end)
    console.log(`Low nibble: 14 (0xE)`);
    console.log(`Actual offset needed: ${offsetFromEnd}`);
    console.log(`Offset / LowNibble: ${offsetFromEnd / 14} = ${Math.floor(offsetFromEnd / 14)}`);
}
